<?php

/**
 * Implements hook_update_N().
 */
function file_adoption_update_10001() {
  $config = \Drupal::configFactory()->getEditable('file_adoption.settings');
  if ($config->get('items_per_run') === NULL) {
    $config->set('items_per_run', 20)->save();
  }
  return t('Added items_per_run setting.');
}

/**
 * Implements hook_schema().
 */
function file_adoption_schema() {
  $schema['file_adoption_orphans'] = [
    'description' => 'Orphan file URIs discovered during scans.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary identifier.',
      ],
      'uri' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'File URI.',
      ],
      'timestamp' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Time the orphan was discovered.',
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      'uri' => ['uri'],
    ],
    'indexes' => [
      'timestamp' => ['timestamp'],
    ],
  ];

  $schema['file_adoption_hardlinks'] = [
    'description' => 'Tracks node references for adopted hardlinked files.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary identifier.',
      ],
      'nid' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'description' => 'Node ID.',
      ],
      'table_name' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Source table name for non-node links.',
      ],
      'row_id' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'description' => 'Row identifier for non-node links.',
      ],
      'uri' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'File URI.',
      ],
      'timestamp' => [
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Time the hardlink was recorded.',
      ],
    ],
    'primary key' => ['id'],
    'indexes' => [
      'nid' => ['nid'],
      'table_row' => ['table_name', 'row_id'],
      'uri' => ['uri'],
      'timestamp' => ['timestamp'],
    ],
    'unique keys' => [
      'nid_uri' => ['nid', 'uri'],
      'table_row_uri' => ['table_name', 'row_id', 'uri'],
    ],
  ];
  return $schema;
}

/**
 * Creates the orphan tracking table on update.
 */
function file_adoption_update_10002() {
  $schema = file_adoption_schema()['file_adoption_orphans'];
  $db = \Drupal::database();
  if (!$db->schema()->tableExists('file_adoption_orphans')) {
    $db->schema()->createTable('file_adoption_orphans', $schema);
  }
  return t('Added file_adoption_orphans table.');
}

/**
 * Adds the ignore_symlinks setting.
 */
function file_adoption_update_10003() {
  $config = \Drupal::configFactory()->getEditable('file_adoption.settings');
  if ($config->get('ignore_symlinks') === NULL) {
    $config->set('ignore_symlinks', FALSE)->save();
  }
  return t('Added ignore_symlinks setting.');
}

/**
 * Creates the hardlink tracking table on update.
 */
function file_adoption_update_10004() {
  $schema = file_adoption_schema()['file_adoption_hardlinks'];
  $db = \Drupal::database();
  if (!$db->schema()->tableExists('file_adoption_hardlinks')) {
    $db->schema()->createTable('file_adoption_hardlinks', $schema);
  }
  return t('Added file_adoption_hardlinks table.');
}

/**
 * Drops the hardlink URI unique index and adds a regular index.
 */
function file_adoption_update_10005() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('file_adoption_hardlinks')) {
    if (method_exists($schema, 'uniqueKeyExists')) {
      if ($schema->uniqueKeyExists('file_adoption_hardlinks', 'uri')) {
        $schema->dropUniqueKey('file_adoption_hardlinks', 'uri');
      }
    }
    elseif ($schema->indexExists('file_adoption_hardlinks', 'uri')) {
      $schema->dropIndex('file_adoption_hardlinks', 'uri');
    }
    if (!$schema->indexExists('file_adoption_hardlinks', 'uri')) {
      // SQLite's Schema::addIndex() requires an explicit options array.
      $schema->addIndex('file_adoption_hardlinks', 'uri', ['uri'], []);
    }
  }
  return t('Adjusted indexes for file_adoption_hardlinks.');
}

/**
 * Adds a composite unique key on URI and node ID for hardlink tracking.
 */
function file_adoption_update_10006() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('file_adoption_hardlinks')) {
    if (method_exists($schema, 'uniqueKeyExists')) {
      if ($schema->uniqueKeyExists('file_adoption_hardlinks', 'uri')) {
        $schema->dropUniqueKey('file_adoption_hardlinks', 'uri');
      }
      if (!$schema->uniqueKeyExists('file_adoption_hardlinks', 'uri_nid')) {
        $schema->addUniqueKey('file_adoption_hardlinks', 'uri_nid', ['uri', 'nid'], []);
      }
    }
    else {
      if ($schema->indexExists('file_adoption_hardlinks', 'uri')) {
        $schema->dropIndex('file_adoption_hardlinks', 'uri');
      }
      if (!$schema->indexExists('file_adoption_hardlinks', 'uri_nid')) {
        $schema->addUniqueKey('file_adoption_hardlinks', 'uri_nid', ['uri', 'nid'], []);
      }
    }
  }
  return t('Added composite unique key on URI and node ID.');
}

/**
 * Replaces the unique key on URI and node ID with nid and uri order.
 */
function file_adoption_update_10007() {
  $schema = \Drupal::database()->schema();
  if ($schema->tableExists('file_adoption_hardlinks')) {
    if (method_exists($schema, 'uniqueKeyExists')) {
      if ($schema->uniqueKeyExists('file_adoption_hardlinks', 'uri_nid')) {
        $schema->dropUniqueKey('file_adoption_hardlinks', 'uri_nid');
      }
      if (!$schema->uniqueKeyExists('file_adoption_hardlinks', 'nid_uri')) {
        $schema->addUniqueKey('file_adoption_hardlinks', 'nid_uri', ['nid', 'uri'], []);
      }
    }
    else {
      if ($schema->indexExists('file_adoption_hardlinks', 'uri_nid')) {
        $schema->dropIndex('file_adoption_hardlinks', 'uri_nid');
      }
      if (!$schema->indexExists('file_adoption_hardlinks', 'nid_uri')) {
        $schema->addUniqueKey('file_adoption_hardlinks', 'nid_uri', ['nid', 'uri'], []);
      }
    }
    if (!$schema->indexExists('file_adoption_hardlinks', 'uri')) {
      // Ensure compatibility with drivers that require the options argument.
      $schema->addIndex('file_adoption_hardlinks', 'uri', ['uri'], []);
    }
  }
  return t('Added nid_uri composite unique key.');
}
