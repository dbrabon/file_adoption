<?php
declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\file_adoption\FileScanner;

/** @return \Drupal\file_adoption\FileScanner */
function _file_adoption_scanner(): FileScanner {
  return \Drupal::service('file_adoption.scanner');
}

/**
 * Implements hook_cron().
 */
function file_adoption_cron(): void {
  $scanner = _file_adoption_scanner();
  $config  = \Drupal::config('file_adoption.settings');
  $state   = \Drupal::state();

  if ($state->get('file_adoption.needs_initial_scan')) {
    $scanner->scanPublicFiles();
    $state->set('file_adoption.last_full_scan', \Drupal::time()->getCurrentTime());
    $state->delete('file_adoption.needs_initial_scan');
  }

  $interval = ((int) ($config->get('scan_interval_hours') ?? 24)) * 3600;
  $last     = (int) $state->get('file_adoption.last_full_scan', 0);

  if (\Drupal::time()->getCurrentTime() - $last >= $interval) {
    $scanner->scanPublicFiles();
    $state->set('file_adoption.last_full_scan', \Drupal::time()->getCurrentTime());
  }

  if ($config->get('enable_adoption')) {
    $scanner->adoptUnmanaged((int) ($config->get('items_per_run') ?? 20));
  }
}

/**
 * Implements hook_entity_insert().
 */
function file_adoption_entity_insert(EntityInterface $entity): void {
  if ($entity->getEntityTypeId() !== 'file') {
    return;
  }
  $uri = $entity->getFileUri();
  if (!str_starts_with($uri, 'public://')) {
    return;
  }
  $scanner  = _file_adoption_scanner();
  $relative = substr($uri, 9);
  $ignored  = $scanner->isIgnored($relative, $scanner->getIgnorePatterns());

  \Drupal::database()->merge('file_adoption_index')
    ->key('uri', $uri)
    ->fields([
      'timestamp'       => \Drupal::time()->getCurrentTime(),
      'is_ignored'      => $ignored ? 1 : 0,
      'is_managed'      => 1,
      'directory_depth' => substr_count($relative, '/'),
    ])
    ->execute();
}

/**
 * Implements hook_entity_delete().
 */
function file_adoption_entity_delete(EntityInterface $entity): void {
  if ($entity->getEntityTypeId() !== 'file') {
    return;
  }
  $uri = $entity->getFileUri();
  if (!str_starts_with($uri, 'public://')) {
    return;
  }
  $scanner  = _file_adoption_scanner();
  $relative = substr($uri, 9);
  $ignored  = $scanner->isIgnored($relative, $scanner->getIgnorePatterns());
  $real     = \Drupal::service('file_system')->realpath($uri);

  if ($real && file_exists($real)) {
    \Drupal::database()->merge('file_adoption_index')
      ->key('uri', $uri)
      ->fields([
        'timestamp'       => \Drupal::time()->getCurrentTime(),
        'is_ignored'      => $ignored ? 1 : 0,
        'is_managed'      => 0,
        'directory_depth' => substr_count($relative, '/'),
      ])
      ->execute();
  }
  else {
    \Drupal::database()->delete('file_adoption_index')
      ->condition('uri', $uri)
      ->execute();
  }
}
