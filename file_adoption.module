<?php

/**
 * @file
 * Hooks and core integration for the file_adoption module.
 */

/**
 * Implements hook_cron().
 */
function file_adoption_cron() {
  $config = \Drupal::config('file_adoption.settings');
  $state = \Drupal::state();

  // Prevent overlapping cron runs.
  $lock = $state->get('file_adoption.cron_lock');
  if ($lock && (time() - $lock) < 3600) {
    return;
  }
  $state->set('file_adoption.cron_lock', time());

  try {
    // Resume any pending scan batches from the configuration form.
    if ($state->get('file_adoption.scan_progress')) {
      $context = ['cron' => TRUE];
      file_adoption_scan_batch_step($context);
    }

    /** @var \Drupal\file_adoption\FileScanner $scanner */
    $scanner = \Drupal::service('file_adoption.file_scanner');

    // Refresh directory inventory when requested.
    // if ($state->get('file_adoption.inventory_pending')) {
    //   $depth = (int) $config->get('folder_depth');
    //   $scanner->getDirectoryInventory($depth, TRUE);
    //   $state->delete('file_adoption.inventory_pending');
    // }

    // Discover example files when requested.
    // if ($state->get('file_adoption.examples_pending')) {
    //   $depth = (int) $config->get('folder_depth');
    //   $dirs = $scanner->getDirectoryInventory($depth);
    //   array_unshift($dirs, '');
    //   $scanner->cacheFolderExamples($dirs);
    //   $state->delete('file_adoption.examples_pending');
    // }

    $limit = (int) $config->get('items_per_run');
    if ($limit > 5000) {
      $limit = 5000;
    }

    // Resume incremental cron scanning using the stored offset.
    $resume = $state->get('file_adoption.cron_offset') ?: '';
    $chunk = $scanner->scanChunk($resume, $limit, 10);

    if ($config->get('enable_adoption') && !empty($chunk['to_manage'])) {
      $scanner->adoptFiles($chunk['to_manage']);
    }

    if ($chunk['resume'] === '') {
      $state->delete('file_adoption.cron_offset');
    }
    else {
      $state->set('file_adoption.cron_offset', $chunk['resume']);
    }
  }
  finally {
    $state->delete('file_adoption.cron_lock');
  }
}

/**
 * Batch operation for scanning files in chunks.
 */
function file_adoption_scan_batch_step(array &$context) {
  $state = \Drupal::state();
  /** @var \Drupal\file_adoption\FileScanner $scanner */
  $scanner = \Drupal::service('file_adoption.file_scanner');

  $progress = $state->get('file_adoption.scan_progress') ?: [
    'resume' => '',
    'result' => [
      'files' => 0,
      'orphans' => 0,
      'to_manage' => [],
      'dir_counts' => [],
    ],
  ];

  $limit = (int) \Drupal::config('file_adoption.settings')->get('items_per_run');
  if ($limit > 5000) {
    $limit = 5000;
  }

  $chunk = $scanner->scanChunk($progress['resume'], $limit, 10);
  $progress['resume'] = $chunk['resume'];
  $progress['result']['files'] += $chunk['files'];
  $progress['result']['orphans'] += $chunk['orphans'];
  $progress['result']['to_manage'] = array_merge($progress['result']['to_manage'], $chunk['to_manage']);
  foreach ($chunk['dir_counts'] as $dir => $count) {
    if (!isset($progress['result']['dir_counts'][$dir])) {
      $progress['result']['dir_counts'][$dir] = 0;
    }
    $progress['result']['dir_counts'][$dir] += $count;
  }

  if ($progress['resume'] === '') {
    $context['finished'] = 1;
    if (empty($context['cron'])) {
      $progress['result']['dir_counts'] = $scanner->countFilesByDirectory();
    }
    $context['results'] = $progress['result'];
    $state->set('file_adoption.scan_results', $progress['result']);
    $state->delete('file_adoption.scan_progress');
  }
  else {
    $values = [
      '@count' => $progress['result']['files'],
      '@path' => $chunk['last_path'] ?? $progress['resume'],
    ];
    $message = t('Processed @count files (last path: @path)', $values);
    if (!empty($chunk['errors'])) {
      $message .= ' ' . t('Errors: @errors', ['@errors' => implode('; ', $chunk['errors'])]);
    }
    $context['message'] = $message;
    $state->set('file_adoption.scan_progress', $progress);
    $context['finished'] = 0;
  }
}

/**
 * Batch finished callback.
 */
function file_adoption_scan_batch_finished($success, array $results, array $operations) {
  if ($success) {
    \Drupal::messenger()->addStatus(t('Scan complete: @count file(s) found. Counts are limited by "Items per cron run".', ['@count' => $results['files']]));
  }
}
